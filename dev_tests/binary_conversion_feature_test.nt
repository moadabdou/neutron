use sys;
use json;
use math;
use convert;
use my_utils;

say("=== Neutron Binary Conversion Feature Test ===");
say("");

say("1. Core Language Features");
var number = 42;
var text = "Hello, Neutron!";
var boolean = true;
var nilValue = nil;
say("  - Variables and Data Types: OK");

var a = 10;
var b = 3;
var c = a + b;
c = a - b;
c = a * b;
c = a / b;
say("  - Operators: OK");

if (a > b) {
    say("  - If/else statements: OK");
}

var i = 0;
while (i < 3) {
    i = i + 1;
}
say("  - While loops: OK");

for (var j = 0; j < 3; j = j + 1) {
    say("  - For loop iteration: " + j);
}
say("  - For loops: OK");

fun greet(name) {
    return "Hello, " + name + "!";
}
say("  - Functions with return: OK");
say(greet("World"));

class Person {
    var name;
    fun say_name() {
        say("My name is " + this.name);
    }
}

var p = Person();
p.name = "John";
p.say_name();
say("  - Classes and Objects: OK");

say("");
say("2. Built-in Modules");

var data = {"result": math.pow(2, 8)};
var jsonStr = json.stringify(data);
sys.write("result.txt", jsonStr);
say("  - sys, json, math, convert modules: OK");

say("");
say("3. Neutron Modules (.nt files)");

var fib_result = my_utils.calculate_fibonacci(10);
my_utils.save_result("output.txt", fib_result);
say("  - Neutron module import and execution: OK");
say("  - Fibonacci(10) = " + convert.str(fib_result));


say("");
say("4. Native Box Modules (.so files)");
say("  - This test requires a native module to be present in box/test_module/");
say("  - Skipping this test for now.");



say("");
say("=== End of Neutron Binary Conversion Feature Test ===");