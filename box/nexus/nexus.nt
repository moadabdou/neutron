// Nexus - REST API Framework for Neutron
// Rewritten to work without classes

// Create a new router instance
fun create_router() {
    return {
        "routes": {}
    };
}

// Register a GET route
fun router_get(router, path, handler) {
    if (router["routes"][path] == nil) {
        router["routes"][path] = {};
    }
    router["routes"][path]["GET"] = handler;
}

// Register a POST route
fun router_post(router, path, handler) {
    if (router["routes"][path] == nil) {
        router["routes"][path] = {};
    }
    router["routes"][path]["POST"] = handler;
}

// Register a PUT route
fun router_put(router, path, handler) {
    if (router["routes"][path] == nil) {
        router["routes"][path] = {};
    }
    router["routes"][path]["PUT"] = handler;
}

// Register a DELETE route
fun router_delete(router, path, handler) {
    if (router["routes"][path] == nil) {
        router["routes"][path] = {};
    }
    router["routes"][path]["DELETE"] = handler;
}

// Handle an incoming request
fun router_handle_request(router, method, path, data) {
    var response = {
        "status": 404,
        "headers": {"Content-Type": "application/json"},
        "body": "{\"error\": \"Not Found\"}"
    };
    
    // Find matching route
    if (router["routes"][path] != nil && router["routes"][path][method] != nil) {
        var handler = router["routes"][path][method];
        response = handler(data);
    }
    
    return response;
}

// Create a new response instance
fun create_response() {
    return {
        "status": 200,
        "headers": {},
        "body": ""
    };
}

// Set response status
fun response_status_code(response, code) {
    response["status"] = code;
    return response;
}

// Set response header
fun response_set_header(response, key, value) {
    response["headers"][key] = value;
    return response;
}

// Set response body
fun response_send(response, data) {
    response["body"] = data;
    return response;
}

// Send JSON response
fun response_json(response, data) {
    response["headers"]["Content-Type"] = "application/json";
    response["body"] = data;
    return response;
}

// Simple mock server for testing
fun create_server(router, port) {
    return {
        "router": router,
        "port": port
    };
}

// Simulate starting the server
fun server_listen(server) {
    say("Nexus server listening on port " + server["port"]);
    say("Routes registered:");
    // In a real implementation, this would start an actual HTTP server
    // For now, we'll just print the registered routes
    for (var path in server["router"]["routes"]) {
        for (var method in server["router"]["routes"][path]) {
            say("  " + method + " " + path);
        }
    }
}

// Simulate handling a request
fun server_handle_request(server, method, path, data) {
    return router_handle_request(server["router"], method, path, data);
}

// Utility functions

// Parse JSON data (simplified)
fun parse_json(data) {
    // In a real implementation, this would parse actual JSON
    // For now, we'll just return the data as-is
    return data;
}

// Stringify JSON data (simplified)
fun stringify_json(data) {
    // In a real implementation, this would convert to JSON string
    // For now, we'll just return the data as a string
    return data;
}

// URL parameter parsing
fun parse_params(url) {
    var params = {};
    // Simplified implementation
    // In a real implementation, this would parse query parameters
    return params;
}